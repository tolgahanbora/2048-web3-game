import { Commitment, Signer } from "@solana/web3.js";
import { Transaction } from "@solana/web3.js";
import { ActionPostResponse, Reference } from "./types.js";
/**
 * Thrown when the Action POST response cannot be created.
 */
export declare class CreatePostResponseError extends Error {
    name: string;
}
/**
 * Arguments to create a POST response payload
 */
export interface CreateActionPostResponseArgs {
    /** POST response fields per the Solana Actions spec. */
    fields: Omit<ActionPostResponse, "transaction"> & {
        /** Solana transaction to be base64 encoded. */
        transaction: Transaction;
    };
    /** Optional signers that will sign the transaction. */
    signers?: Signer[];
    /** Optional identity keypair used to aid in identifying an Action provider */
    actionIdentity?: Signer;
    /** Reference keys to be included in the transaction */
    reference?: Reference;
    /** Options for `getRecentBlockhash`. */
    options?: {
        commitment?: Commitment;
    };
}
/**
 * Create the payload to be returned in an Action POST response,
 * including signing and base64 encoding the `transaction`
 *
 * @throws {CreatePostResponseError}
 */
export declare function createPostResponse({ fields, signers, reference, actionIdentity, }: CreateActionPostResponseArgs): Promise<ActionPostResponse>;
//# sourceMappingURL=createPostResponse.d.ts.map