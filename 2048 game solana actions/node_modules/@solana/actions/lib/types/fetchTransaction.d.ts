import { Commitment, Connection, PublicKey } from "@solana/web3.js";
import { Transaction } from "@solana/web3.js";
import { ActionPostRequest, ActionPostResponse } from "./types.js";
/**
 * Thrown when a transaction response can't be fetched.
 */
export declare class FetchActionError extends Error {
    name: string;
}
/**
 * POST response payload that contains the base-64 encoded serialized `transaction` ready to be sent to the client
 */
export interface ActionPostResponseWithSerializedTransaction extends Omit<ActionPostResponse, "transaction"> {
    /** serialized Solana transaction */
    transaction: Transaction;
}
/**
 * Fetch the action payload from a Solana Action request link.
 *
 * @param connection - A connection to the cluster.
 * @param account - Account that may sign the transaction.
 * @param link - `link` in the Solana Action spec.
 * @param options - Options for `getRecentBlockhash`.
 *
 * @throws {FetchActionError}
 */
export declare function fetchTransaction(connection: Connection, link: string | URL, fields: ActionPostRequest, options?: {
    commitment?: Commitment;
}): Promise<ActionPostResponseWithSerializedTransaction>;
/**
 * Thrown when the base64 encoded action `transaction` cannot be serialized
 */
export declare class SerializeTransactionError extends Error {
    name: string;
}
/**
 * Serialize a base64 encoded transaction into a web3.js `Transaction`.
 *
 * @param connection - A connection to the cluster.
 * @param account - Account that may sign the transaction.
 * @param base64Transaction - `transaction` in the Solana Action spec.
 * @param options - Options for `getRecentBlockhash`.
 *
 * @throws {SerializeTransactionError}
 */
export declare function serializeTransaction(connection: Connection, account: string | PublicKey, base64Transaction: string, { commitment }?: {
    commitment?: Commitment;
}): Promise<Transaction>;
//# sourceMappingURL=fetchTransaction.d.ts.map