"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.encodeURL = exports.EncodeURLError = void 0;
const constants_js_1 = require("./constants.js");
/**
 * Thrown when fields cannot be encoded as a blink or Solana Action URL.
 */
class EncodeURLError extends Error {
    constructor() {
        super(...arguments);
        this.name = "EncodeURLError";
    }
}
exports.EncodeURLError = EncodeURLError;
/**
 * Encode a Solana Action URL.
 *
 * @param fields Fields to encode in the URL.
 *
 * @throws {EncodeURLError}
 */
function encodeURL(fields, protocol = constants_js_1.SOLANA_ACTIONS_PROTOCOL) {
    if ("blink" in fields)
        return encodeBlinkURL(fields, protocol);
    return encodeActionRequestURL(fields, protocol);
}
exports.encodeURL = encodeURL;
function encodeActionRequestURL({ link, label, message }, protocol = constants_js_1.SOLANA_ACTIONS_PROTOCOL) {
    // Remove trailing slashes
    const pathname = link.search
        ? encodeURIComponent(String(link).replace(/\/\?/, "?"))
        : String(link).replace(/\/$/, "");
    const url = new URL(protocol + pathname);
    if (label) {
        url.searchParams.append("label", label);
    }
    if (message) {
        url.searchParams.append("message", message);
    }
    return url;
}
function encodeBlinkURL({ blink, action }, protocol) {
    const url = new URL(blink);
    url.searchParams.set(constants_js_1.BLINKS_QUERY_PARAM, encodeURIComponent(encodeActionRequestURL(action, protocol).toString()));
    return url;
}
//# sourceMappingURL=encodeURL.js.map